syntax = "proto3";
package grpc;
import "google/protobuf/timestamp.proto";

//Scheduler service
service RpcService {
    rpc queryFlight (QueryFlightRequest) returns (QueryFlightResponse);
    rpc createItinerary (CreateItineraryRequest) returns (TaskResponse);
    rpc cancelItinerary (CancelItineraryRequest) returns (TaskResponse);
    rpc cancelTask(TaskRequest) returns (TaskResponse);
    rpc getTaskStatus(TaskRequest) returns (TaskResponse);
    rpc isReady (ReadyRequest) returns (ReadyResponse);
}

// QueryFlightRequest
message QueryFlightRequest {
    //is_cargo - true if cargo mission, false if people transport
    bool isCargo = 1;
    //persons - number of people for transport
    optional uint32 persons = 2;
    //weight in grams
    optional uint32 weightGrams = 3;
    //requested earliest time of departure - beginning of the time window in which we search for a flight
    google.protobuf.Timestamp earliestDepartureTime = 4;
    //requested preferred time of arrival - end of the time window in which we search for a flight
    google.protobuf.Timestamp latestArrivalTime = 5;
    // departure vertiport ID
    string origin_vertiport_id = 6;
    // arrival vertiport ID
    string target_vertiport_id = 7;
    // Flight priority (from svc-storage)
    FlightPriority priority = 8;
}

// This is replaced by the FlightPlanObject from svc-storage
//  during the build process. See build.rs
message FlightPlanObject {
    // This will be replaced automatically during build
    bool arbitrary = 1;
}

// This is replaced by the FlightPlanData from svc-storage
//  during the build process. See build.rs
message FlightPlanData {
    // This will be replaced automatically during build
    bool arb = 1;
}

// This is replaced by FlightPriority from svc-storage
//  during the build process. See build.rs
enum FlightPriority {
    // This will be replaced automatically during build
    ARBITRARY = 0;
}

// Create an itinerary by providing possible flight plan data
message CreateItineraryRequest {
    // Flight priority (from svc-storage)
    FlightPriority priority = 1;

    // Flight plans to be considered
    repeated FlightPlanData flight_plans = 2;

    // Expiry time for this task
    google.protobuf.Timestamp expiry = 3;

    // User ID
    string user_id = 4;
}

// Cancel an itinerary by ID
message CancelItineraryRequest {
    // Priority of the cancellation task
    FlightPriority priority = 1;

    // Itinerary UUID
    string itinerary_id = 2;

    // User ID
    string user_id = 3;
}

// Itinerary includes id, flight plan and potential deadhead flights
message Itinerary {
    // flight_plan
    repeated FlightPlanData flight_plans = 1;
}

// QueryFlightResponse
message QueryFlightResponse {
    //array/vector of itineraries items
    repeated Itinerary itineraries = 1;
}

// Task-Related Messages
message TaskRequest {
    // Task ID
    int64 task_id = 1;
}

// Response to Task-Related Requests
message TaskResponse {
    // Task ID
    int64 task_id = 1;

    // Task Details
    TaskMetadata task_metadata = 2;
}

// Metadata for a Scheduler Task
message TaskMetadata {
    // Task status
    TaskStatus status = 1;

    // Task status rationale
    optional TaskStatusRationale status_rationale = 2;

    // Task action
    TaskAction action = 3;

    // Task user ID
    string user_id = 4;

    // Result from the task, if any
    optional string result = 5;
}

// The status of a scheduler task
enum TaskStatus {
    // Queued
    QUEUED = 0;

    // Complete
    COMPLETE = 1;

    // Rejected
    REJECTED = 2;

    // Not Found
    NOT_FOUND = 3;
}

// Explanation for a task status
enum TaskStatusRationale {
    // Client cancelled
    CLIENT_CANCELLED = 0;

    // Expired
    EXPIRED = 1;

    // Schedule conflict
    SCHEDULE_CONFLICT = 2;

    // Itinerary ID not found
    ITINERARY_ID_NOT_FOUND = 3;

    // Priority change
    PRIORITY_CHANGE = 4;

    // Internal Failure
    INTERNAL = 5;

    // Invalid Action
    INVALID_ACTION = 6;
}

// Types of scheduler tasks
enum TaskAction {
    // Confirm itinerary
    CREATE_ITINERARY = 0;

    // Cancel itinerary
    CANCEL_ITINERARY = 1;

    // Reroute
    // REROUTE = 2;
}

// Ready Request
message ReadyRequest {
    // No arguments
}

// Ready Response
message ReadyResponse {
    // ready
    bool ready = 1;
}
